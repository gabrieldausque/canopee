<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Canopee.Common</name>
    </assembly>
    <members>
        <member name="T:Canopee.Common.Configuration.AspNet.Dtos.AgentGroupDto">
            <summary>
            Indicate a group that a specific agent belong to
            </summary>
        </member>
        <member name="P:Canopee.Common.Configuration.AspNet.Dtos.AgentGroupDto.AgentId">
            <summary>
            The Agent Id
            </summary>
        </member>
        <member name="P:Canopee.Common.Configuration.AspNet.Dtos.AgentGroupDto.Group">
            <summary>
            The group name
            </summary>
        </member>
        <member name="P:Canopee.Common.Configuration.AspNet.Dtos.AgentGroupDto.Priority">
            <summary>
            The precedence order of the group for the agent
            </summary>
        </member>
        <member name="T:Canopee.Common.Configuration.AspNet.Dtos.CanopeeConfigurationDto">
            <summary>
            A configuration associated to a agent and/or a group. 
            </summary>
        </member>
        <member name="P:Canopee.Common.Configuration.AspNet.Dtos.CanopeeConfigurationDto.Configuration">
            <summary>
            The configuration as Json
            </summary>
        </member>
        <member name="P:Canopee.Common.Configuration.AspNet.Dtos.CanopeeConfigurationDto.AgentId">
            <summary>
            The agent Id. If set to "Default", it concerns all agent
            </summary>
        </member>
        <member name="P:Canopee.Common.Configuration.AspNet.Dtos.CanopeeConfigurationDto.Group">
            <summary>
            The group name. If set to "Default", it concerns all group (or no group) 
            </summary>
        </member>
        <member name="P:Canopee.Common.Configuration.AspNet.Dtos.CanopeeConfigurationDto.Priority">
            <summary>
            The precedence of the configuration on other configuration (not used for now)
            </summary>
        </member>
        <member name="T:Canopee.Common.Configuration.Events.NewConfigurationEventArg">
            <summary>
            Args for the new configuration event. When a new configuration is detected by the <see cref="T:Canopee.Common.Configuration.IConfigurationSynchronizer"/>, it raise <see cref="E:Canopee.Common.Configuration.IConfigurationSynchronizer.OnNewConfiguration"/> event.
            </summary>
        </member>
        <member name="P:Canopee.Common.Configuration.Events.NewConfigurationEventArg.NewConfiguration">
            <summary>
            The new configuration obtained
            </summary>
        </member>
        <member name="T:Canopee.Common.Configuration.ICanopeeConfigurationReader">
            <summary>
            The contract for an object to obtain groups or configurations
            </summary>
        </member>
        <member name="M:Canopee.Common.Configuration.ICanopeeConfigurationReader.Initialize(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initialize the reader, using configuration. 
            </summary>
            <param name="serviceConfiguration">the configuration service configuration</param>
            <param name="loggingConfiguration">the logger configuration, needed to initialize the logger of the class</param>
        </member>
        <member name="M:Canopee.Common.Configuration.ICanopeeConfigurationReader.GetGroups(System.String)">
            <summary>
            Get all groups for an agent id
            </summary>
            <param name="agentId">the agent id to obtain the group for</param>
            <returns>a collection of <see cref="T:Canopee.Common.Configuration.AspNet.Dtos.AgentGroupDto"/></returns>
        </member>
        <member name="M:Canopee.Common.Configuration.ICanopeeConfigurationReader.GetConfiguration(System.String,System.String)">
            <summary>
            Get a configuration for specified agent id and group.
            </summary>
            <param name="agentId">the agent id</param>
            <param name="group">the group</param>
            <returns>a <see cref="T:Canopee.Common.JsonObject"/> that contains all configurations</returns>
        </member>
        <member name="T:Canopee.Common.Configuration.IConfigurationSynchronizer">
            <summary>
            Contract for the object that will synchronize configuration from an external source.
            </summary>
        </member>
        <member name="M:Canopee.Common.Configuration.IConfigurationSynchronizer.GetConfigFromSource">
            <summary>
            Get the actual configuration from the external source 
            </summary>
            <returns>a <see cref="T:Canopee.Common.JsonObject"/> that contains all configuration properties</returns>
        </member>
        <member name="M:Canopee.Common.Configuration.IConfigurationSynchronizer.Start">
            <summary>
            Start the synchronization process
            </summary>
        </member>
        <member name="M:Canopee.Common.Configuration.IConfigurationSynchronizer.Stop">
            <summary>
            Stop the synchronization process
            </summary>
        </member>
        <member name="E:Canopee.Common.Configuration.IConfigurationSynchronizer.OnNewConfiguration">
            <summary>
            Event raised if a new configuration is obtained from the source
            </summary>
        </member>
        <member name="M:Canopee.Common.Configuration.IConfigurationSynchronizer.Initialize(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initialize the synchronizer after creation
            </summary>
            <param name="configurationServiceConfiguration">the configuration service configuration</param>
            <param name="loggingConfiguration">the logging configuration</param>
        </member>
        <member name="T:Canopee.Common.Hosting.ICanopeeHost">
            <summary>
            A host that will contain the Canope pipeline engine
            </summary>
        </member>
        <member name="M:Canopee.Common.Hosting.ICanopeeHost.Start">
            <summary>
            Start the host
            </summary>
        </member>
        <member name="M:Canopee.Common.Hosting.ICanopeeHost.Stop">
            <summary>
            Stop the host
            </summary>
        </member>
        <member name="T:Canopee.Common.Logging.ICanopeeLogger">
            <summary>
            Contract for the object that will log information in object
            </summary>
        </member>
        <member name="M:Canopee.Common.Logging.ICanopeeLogger.Initialize(Microsoft.Extensions.Configuration.IConfiguration,System.Type)">
            <summary>
            Initialize the logger object
            </summary>
            <param name="loggerConfiguration">the logger configuration</param>
            <param name="callerType">the type of the object that will call the logger</param>
        </member>
        <member name="M:Canopee.Common.Logging.ICanopeeLogger.Log(System.String,Microsoft.Extensions.Logging.LogLevel,System.String,System.String,System.Int32)">
            <summary>
            Log a message with the specified log level
            </summary>
            <param name="message">the message to log</param>
            <param name="level">the <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> of the message</param>
            <param name="memberName">the member name specified on runtime</param>
            <param name="sourceFilePath">the source path specified on runtime</param>
            <param name="sourceLineNumber">the source line number specified on runtime</param>
        </member>
        <member name="M:Canopee.Common.Logging.ICanopeeLogger.LogInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Log a message with info level
            </summary>
            <param name="message">the message to log</param>
            <param name="memberName">the member name specified on runtime</param>
            <param name="sourceFilePath">the source path specified on runtime</param>
            <param name="sourceLineNumber">the source line number specified on runtime</param>
        </member>
        <member name="M:Canopee.Common.Logging.ICanopeeLogger.LogError(System.String,System.String,System.String,System.Int32)">
            <summary>
            Log a message with error level
            </summary>
            <param name="message">the message to log</param>
            <param name="memberName">the member name specified on runtime</param>
            <param name="sourceFilePath">the source path specified on runtime</param>
            <param name="sourceLineNumber">the source line number specified on runtime</param>
        </member>
        <member name="M:Canopee.Common.Logging.ICanopeeLogger.LogWarning(System.String,System.String,System.String,System.Int32)">
            <summary>
            Log a message with warning level
            </summary>
            <param name="message">the message to log</param>
            <param name="memberName">the member name specified on runtime</param>
            <param name="sourceFilePath">the source path specified on runtime</param>
            <param name="sourceLineNumber">the source line number specified on runtime</param>
        </member>
        <member name="M:Canopee.Common.Logging.ICanopeeLogger.LogCritical(System.String,System.String,System.String,System.Int32)">
            <summary>
            Log a message with critical level
            </summary>
            <param name="message">the message to log</param>
            <param name="memberName">the member name specified on runtime</param>
            <param name="sourceFilePath">the source path specified on runtime</param>
            <param name="sourceLineNumber">the source line number specified on runtime</param>
        </member>
        <member name="M:Canopee.Common.Logging.ICanopeeLogger.LogDebug(System.String,System.String,System.String,System.Int32)">
            <summary>
            Log a message with debug level
            </summary>
            <param name="message">the message to log</param>
            <param name="memberName">the member name specified on runtime</param>
            <param name="sourceFilePath">the source path specified on runtime</param>
            <param name="sourceLineNumber">the source line number specified on runtime</param>
        </member>
        <member name="T:Canopee.Common.Pipelines.Events.CollectedEvent">
            <summary>
            An event collected, transformed and output by a <see cref="T:Canopee.Common.Pipelines.ICollectPipeline"/>
            Implements <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/>
            </summary>
        </member>
        <member name="M:Canopee.Common.Pipelines.Events.CollectedEvent.#ctor">
            <summary>
            Default constructor of the constructor event
            </summary>
        </member>
        <member name="M:Canopee.Common.Pipelines.Events.CollectedEvent.#ctor(System.String)">
            <summary>
            Constructor that specified the agentid of the collected event
            </summary>
            <param name="agentId"></param>
        </member>
        <member name="P:Canopee.Common.Pipelines.Events.CollectedEvent.EventId">
            <summary>
            The id of the collected event
            </summary>
        </member>
        <member name="P:Canopee.Common.Pipelines.Events.CollectedEvent.EventDate">
            <summary>
              Inherit from <see cref="P:Canopee.Common.Pipelines.Events.ICollectedEvent.EventDate"/>
            </summary>
            <inheritdoc cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/>
        </member>
        <member name="P:Canopee.Common.Pipelines.Events.CollectedEvent.AgentId">
            <summary>
              Inherit from <see cref="P:Canopee.Common.Pipelines.Events.ICollectedEvent.AgentId"/>
            </summary>
            <inheritdoc cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/>
        </member>
        <member name="P:Canopee.Common.Pipelines.Events.CollectedEvent.Raw">
            <summary>
            Event as raw string.
            </summary>
            <inheritdoc cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/>
        </member>
        <member name="P:Canopee.Common.Pipelines.Events.CollectedEvent.ExtractedFields">
            <summary>
              Inherit from <see cref="P:Canopee.Common.Pipelines.Events.ICollectedEvent.ExtractedFields"/>
            </summary>
            <inheritdoc cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/>
        </member>
        <member name="M:Canopee.Common.Pipelines.Events.CollectedEvent.GetFieldValue(System.String)">
            <summary>
              Inherit from <see cref="M:Canopee.Common.Pipelines.Events.ICollectedEvent.GetFieldValue(System.String)"/>
            </summary>
            <inheritdoc cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/>
        </member>
        <member name="M:Canopee.Common.Pipelines.Events.CollectedEvent.SetFieldValue(System.String,System.Object)">
            <summary>
              Inherit from <see cref="M:Canopee.Common.Pipelines.Events.ICollectedEvent.SetFieldValue(System.String,System.Object)"/>
            </summary>
            <inheritdoc cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/>
        </member>
        <member name="M:Canopee.Common.Pipelines.Events.CollectedEvent.ConvertTo``1">
            <summary>
              Inherit from <see cref="M:Canopee.Common.Pipelines.Events.ICollectedEvent.ConvertTo``1"/>
            </summary>
            <inheritdoc cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/>
        </member>
        <member name="M:Canopee.Common.Pipelines.Events.CollectedEvent.GetEventType">
            <summary>
              Inherit from <see cref="M:Canopee.Common.Pipelines.Events.ICollectedEvent.GetEventType"/>
            </summary>
            <inheritdoc cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/>
        </member>
        <member name="P:Canopee.Common.Pipelines.Events.ICollectedEvent.EventDate">
            <summary>
            The <see cref="T:System.DateTime"/> when the event occured/collected
            </summary>
        </member>
        <member name="P:Canopee.Common.Pipelines.Events.ICollectedEvent.AgentId">
            <summary>
            The agent id on which the event has been collected
            </summary>
        </member>
        <member name="P:Canopee.Common.Pipelines.Events.ICollectedEvent.ExtractedFields">
            <summary>
            Extended fields of the event that may have been extracted or set by a <see cref="T:Canopee.Common.Pipelines.ITransform"/> during pipeline transformation
            </summary>
        </member>
        <member name="M:Canopee.Common.Pipelines.Events.ICollectedEvent.GetFieldValue(System.String)">
            <summary>
            Get a field value (standard property or from extracted fields)
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Canopee.Common.Pipelines.Events.ICollectedEvent.SetFieldValue(System.String,System.Object)">
            <summary>
            Set a field value on standard properties or <see cref="P:Canopee.Common.Pipelines.Events.ICollectedEvent.ExtractedFields"/> if no standard properties are found for given name
            </summary>
            <param name="propertyName">the name of the property to set value for</param>
            <param name="value">the value to set</param>
        </member>
        <member name="M:Canopee.Common.Pipelines.Events.ICollectedEvent.ConvertTo``1">
            <summary>
            Convert a <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/> to another <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/>
            </summary>
            <typeparam name="T">the target <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/> type</typeparam>
            <returns>an instance of the target <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/> type</returns>
        </member>
        <member name="M:Canopee.Common.Pipelines.Events.ICollectedEvent.GetEventType">
            <summary>
            Get the type of the event. May be a custom string, by default the full name of the class
            </summary>
            <returns></returns>
        </member>
        <member name="T:Canopee.Common.Pipelines.Events.TriggerEventArgs">
            <summary>
            The arg of an event that triggered a pipeline.
            </summary>
        </member>
        <member name="M:Canopee.Common.Pipelines.Events.TriggerEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Canopee.Common.Pipelines.Events.TriggerEventArgs.#ctor(System.String,System.String)">
            <summary>
            Create a trigger event arg with setting the name of the pipeline to trigger and its Id
            </summary>
            <param name="name">The name of the pipeline</param>
            <param name="Id">The id of the pipeline</param>
        </member>
        <member name="P:Canopee.Common.Pipelines.Events.TriggerEventArgs.PipelineName">
            <summary>
            The name of the pipeline to trigger 
            </summary>
        </member>
        <member name="P:Canopee.Common.Pipelines.Events.TriggerEventArgs.PipelineId">
            <summary>
            The id of the pipeline to trigger
            </summary>
        </member>
        <member name="P:Canopee.Common.Pipelines.Events.TriggerEventArgs.Raw">
            <summary>
            An object specific to the trigger
            </summary>
        </member>
        <member name="T:Canopee.Common.Pipelines.Events.WebTriggerArg">
            <summary>
            A <see cref="T:Canopee.Common.Pipelines.Events.TriggerEventArgs"/> specific to a web context
            </summary>
        </member>
        <member name="M:Canopee.Common.Pipelines.Events.WebTriggerArg.#ctor(System.String,Canopee.Common.Pipelines.Events.CollectedEvent)">
            <summary>
            Constructor that set up a CollectedEvent that may have been transmitted through a web call
            </summary>
            <param name="pipelineId">the id of the pipeline to trigger</param>
            <param name="collectedEvent">the collected event to be treated by the pipeline</param>
        </member>
        <member name="T:Canopee.Common.Pipelines.ICollectPipeline">
            <summary>
            The interface for an extract, transform and load process that is the heart of Canopee platform.
            </summary>
        </member>
        <member name="P:Canopee.Common.Pipelines.ICollectPipeline.Name">
            <summary>
            The name of the current <see cref="T:Canopee.Common.Pipelines.ICollectPipeline"/>
            </summary>
        </member>
        <member name="P:Canopee.Common.Pipelines.ICollectPipeline.Id">
            <summary>
            The id of the current <see cref="T:Canopee.Common.Pipelines.ICollectPipeline"/>. Must be unique over the application.
            </summary>
        </member>
        <member name="M:Canopee.Common.Pipelines.ICollectPipeline.Initialize(Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Initialize the pipeline based on a configuration object
            </summary>
            <param name="configuration">the pipeline configuration</param>
        </member>
        <member name="M:Canopee.Common.Pipelines.ICollectPipeline.Collect(Canopee.Common.Pipelines.Events.TriggerEventArgs)">
            <summary>
            This method will start immediately the collect, transform and load of one or more <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/>. This will be triggered by the trigger of the pipeline
            </summary>
            <param name="fromTriggerArgs"></param>
        </member>
        <member name="M:Canopee.Common.Pipelines.ICollectPipeline.Run">
            <summary>
            Start to listen to the trigger to make the collect of <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/> wanted
            </summary>
        </member>
        <member name="M:Canopee.Common.Pipelines.ICollectPipeline.Stop">
            <summary>
            Stop to listen to the trigger
            </summary>
        </member>
        <member name="P:Canopee.Common.Pipelines.ICollectPipeline.Input">
            <summary>
            The <see cref="T:Canopee.Common.Pipelines.IInput"/> that will collect one or more <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/> when the trigger is raised
            </summary>
        </member>
        <member name="P:Canopee.Common.Pipelines.ICollectPipeline.Transforms">
            <summary>
            The collection of <see cref="T:Canopee.Common.Pipelines.ITransform"/> that will complete extracted information from <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/> collected by the <see cref="P:Canopee.Common.Pipelines.ICollectPipeline.Input"/>
            </summary>
        </member>
        <member name="P:Canopee.Common.Pipelines.ICollectPipeline.Output">
            <summary>
            The <see cref="T:Canopee.Common.Pipelines.IOutput"/> object that will send the collection of extracted and transformed <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/>
            </summary>
        </member>
        <member name="P:Canopee.Common.Pipelines.ICollectPipeline.Trigger">
            <summary>
            The <see cref="T:Canopee.Common.Pipelines.ITrigger"/> that will be start the collect of the <see cref="T:Canopee.Common.Pipelines.ICollectPipeline"/> that owns it
            </summary>
        </member>
        <member name="T:Canopee.Common.Pipelines.IInput">
            <summary>
            The interface of the object that is in charge of collecting one or more event in a <see cref="T:Canopee.Common.Pipelines.ICollectPipeline"/> collect process
            </summary>
        </member>
        <member name="M:Canopee.Common.Pipelines.IInput.Collect(Canopee.Common.Pipelines.Events.TriggerEventArgs)">
            <summary>
            Collect one or more <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/> from a source
            </summary>
            <param name="fromTriggerEventArgs">The arg specific to the <see cref="T:Canopee.Common.Pipelines.ITrigger"/> that has raised the collect process</param>
            <returns></returns>
        </member>
        <member name="M:Canopee.Common.Pipelines.IInput.Initialize(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Initialize the <see cref="T:Canopee.Common.Pipelines.IInput"/> object with its specific configuration
            </summary>
            <param name="configurationInput">the "Input" configuration</param>
            <param name="agentId">the agentId that will be populated in all <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/></param>
        </member>
        <member name="P:Canopee.Common.Pipelines.IInput.AgentId">
            <summary>
            The agent Id that will be populated in all <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/>
            </summary>
        </member>
        <member name="T:Canopee.Common.Pipelines.IOutput">
            <summary>
            The interface of the object that is in charge of pushing <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/> of a <see cref="M:Canopee.Common.Pipelines.ICollectPipeline.Collect(Canopee.Common.Pipelines.Events.TriggerEventArgs)"/> process to an external output
            </summary>
        </member>
        <member name="M:Canopee.Common.Pipelines.IOutput.SendToOutput(Canopee.Common.Pipelines.Events.ICollectedEvent)">
            <summary>
            Send a collected event to a specific output
            </summary>
            <param name="collectedEvent">send a collected event to a specific output</param>
        </member>
        <member name="M:Canopee.Common.Pipelines.IOutput.Initialize(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initialize the <see cref="T:Canopee.Common.Pipelines.IOutput"/> with its specific "Output" configuration
            </summary>
            <param name="configurationOutput">configuration output</param>
        </member>
        <member name="T:Canopee.Common.Pipelines.ITransform">
            <summary>
            The interface of the object that is in charge of enrich one or more event in a <see cref="T:Canopee.Common.Pipelines.ICollectPipeline"/> collect process after the extraction of it by a <see cref="T:Canopee.Common.Pipelines.IInput"/> object
            </summary>
        </member>
        <member name="M:Canopee.Common.Pipelines.ITransform.Transform(Canopee.Common.Pipelines.Events.ICollectedEvent)">
            <summary>
            Transform a <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/> to another <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/> implementation or simply enrich it by adding properties to the <see cref="P:Canopee.Common.Pipelines.Events.ICollectedEvent.ExtractedFields"/> property
            </summary>
            <param name="input">The <see cref="T:Canopee.Common.Pipelines.Events.ICollectedEvent"/> to transform or enrich</param>
            <returns></returns>
        </member>
        <member name="T:Canopee.Common.Pipelines.ITrigger">
            <summary>
            The interface of the object that is in charge of starting the <see cref="M:Canopee.Common.Pipelines.ICollectPipeline.Collect(Canopee.Common.Pipelines.Events.TriggerEventArgs)"/> process
            </summary>
        </member>
        <member name="P:Canopee.Common.Pipelines.ITrigger.OwnerName">
            <summary>
            The <see cref="P:Canopee.Common.Pipelines.ICollectPipeline.Name"/> that owns this <see cref="T:Canopee.Common.Pipelines.ITrigger"/>
            </summary>
        </member>
        <member name="P:Canopee.Common.Pipelines.ITrigger.OwnerId">
            <summary>
            The <see cref="!:ICollectedPipeline.Id" /> that owns this <see cref="T:Canopee.Common.Pipelines.ITrigger"/>
            </summary>
        </member>
        <member name="M:Canopee.Common.Pipelines.ITrigger.Initialize(Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Initialize this <see cref="T:Canopee.Common.Pipelines.ITrigger"/> with its "Trigger" configuration
            </summary>
            <param name="triggerParameters">The "Trigger" configuration </param>
        </member>
        <member name="M:Canopee.Common.Pipelines.ITrigger.Start">
            <summary>
            Start the listening process that will raise the trigger
            </summary>
        </member>
        <member name="M:Canopee.Common.Pipelines.ITrigger.Stop">
            <summary>
            Stop the listening process
            </summary>
        </member>
        <member name="M:Canopee.Common.Pipelines.ITrigger.RaiseEvent(System.Object,Canopee.Common.Pipelines.Events.TriggerEventArgs)">
            <summary>
            Raise the trigger when needed
            </summary>
            <param name="sender">The <see cref="T:Canopee.Common.Pipelines.ITrigger"/> itself</param>
            <param name="triggerArgs">The arg specific to the <see cref="T:Canopee.Common.Pipelines.ITrigger"/></param>
        </member>
        <member name="M:Canopee.Common.Pipelines.ITrigger.SubscribeToTrigger(System.EventHandler{Canopee.Common.Pipelines.Events.TriggerEventArgs},Canopee.Common.Pipelines.TriggerSubscriptionContext)">
            <summary>
            Subscribe to the trigger event for a specific handler
            </summary>
            <param name="eventHandler">The eventHandler that will be executed when needed by the trigger</param>
            <param name="context">The context of the subscription, often the name and id of a <see cref="!:ICollectedPipeline"/></param>
        </member>
    </members>
</doc>
